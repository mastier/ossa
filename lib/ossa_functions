RSCHK=$_
export FUNCTIONS="$(readlink -f $( cd "$( dirname "${BASH_SOURCE[0]}" )/" && pwd )/${BASH_SOURCE[0]##*/})"
export FUNCTIONS_DIR=${FUNCTIONS%/*}
[[ $RSCHK != $0 ]] || { echo "Error: ${FUNCTIONS} is being ran directly!  Please \"source\" this script."; exit; }

### validation functions ###
# validate if a package is installed
is-installed() {
	[[ -z ${1} || $1 =~ -h ]] && { printf "\e[2GUsage: ${FUNCNAME} <package name>.\n" 1>&2;return 2; } || { local PKG=${1,,}; }
	[[ -n ${2} && $2 =~ -q ]] && local Q=true || local Q=false
	local PCHECK=$(dpkg -l ${PKG}|awk '/^ii/&&/'${PKG}'/{gsub(/:.*$/,"",$2);print $2}')
	[[ ${PCHECK} = ${PKG} ]] && { [[ $Q = false ]] && echo true;return 0; } || { [[ $Q = false ]] && echo false;return 1; }
}

### file/script related functions
# source a file
source-file() {
	[[ -z ${1} || $1 =~ -h ]] && { printf "\e[2GUsage: ${FUNCNAME} <file to source>\n" 1>&2;return 2; } || { local SRCFILE=${1}; }
	[[ -n ${2} && $2 =~ -q ]] && local Q=true || local Q=false
	[[ -s ${SRCFILE} ]] && { [[ $Q = false ]] && printf "Sourcing file (${SRCFILE})\n";source ${SRCFILE};return 0; } || { [[ $Q = false ]] && printf "Cannot file file: \"${SRCFILE}\"\n";return 1; }
};export -f source-file

### Authentication Functions ####
sudo-check() {
	[[ $1 = '--desc' ]] && { printf "\e[2G${FUNCNAME}: Ensures user is either root or a member of the suoders group.\n";return; }
	[[ $EUID -eq 0 ]] && { export SCMD=;[[ ${DEBUG} = True ]] && { echo -en "DEBUG: User is root\n" 1>&2; }; return 0; }
	[[ $EUID -ne 0 && -n $(grep -o sudo <(id 2>/dev/null -Gn)) ]] && { export SCMD="sudo -E";[[ ${DEBUG} = True ]] && { echo -en "DEBUG: User (${USER}) has sudo access.\n"; }; return 0; }
	[[ $EUID -ne 0 && -z $(grep -o sudo <(id 2>/dev/null -Gn)) ]] && { export SCMD="";[[ ${DEBUG} = True ]] && { echo -en "DEBUG: User (${USER}) does NOT have sudo access.\n"; };return 5; }
};export -f sudo-check

write-sudoers-file() {
	[[ $1 = '--desc' ]] && { printf "\e[2G${FUNCNAME}: Write a temporary sudoers file in case the customization session exceeds sudo password grace period\n";return; }
	[[ ${WRITE_SUDOERS} = true ]] || return 1
	export SUDOERS_FILE="$(echo ${0##*/}|sed 's/\..*$//1').${USER}.suduoers"
	[[ -f ${SUDOERS_FILE} ]] && true || { printf ''${USER}' ALL=(ALL) NOPASSWD: ALL'|$SCMD tee 1>/dev/null /etc/sudoers.d/${SUDOERS_FILE}; }
	[[ $? -eq 0 ]] && printf "\e[2G - To prevent authentication timeouts, ${SUDOERS_FILE} has\n\e[5Gbeen created in /etc/sudoers.d & will be removed when ${0##*/} finishes.\n\n"
};export -f write-sudoers-file

sudo-prompt() {
	[[ $1 = '--desc' ]] && { printf "\e[2G${FUNCNAME}: Ensures cached sudo password is viable, if not, prompts user for password and temporarily disables sudo password requirement.\n";return; }
	sudo-check
	[[ $? -eq 1 ]] && { printf "\n\e[2GERROR: Please ensure that $USER is a member of the sudoers group\n";return 1; }
	printf '\e[2GValidating if cached sudo password is still viable\n'
	if [[ $($SCMD -n uptime > /dev/null 2>&1;echo $?) -eq 1 ]];then
		printf '\e[2G - Cached sudo password has expired.\n'
		printf "\n\e[2GSome functions in ${0##*/} require superuser access.\n\n\e[2GPlease enter password for \"${USER}\" when prompted\n\n"
		sleep 1
		$SCMD bash -c "ls > /dev/null 2>&1"
		[[ $? -eq 0 && ${WRITE_SUDOERS} = true ]] && write-sudoers-file
	else
		[[ ${DEBUG} = true ]] && printf '\e[2G - Cached sudo password is still viable.\n'
		[[ ${WRITE_SUDOERS} = true ]] && write-sudoers-file
	fi
};export -f sudo-prompt


### Functions related to URL validation and downloading ###
[[ $(command -v systemd-resolve) ]] && export RSLV_CMD="systemd-resolve --status"
[[ $(command -v resolvectl) ]] && export RSLV_CMD="resolvectl status"
export PRIMARY_NIC=$(ip 2>/dev/null -o r show default|grep -m1 -oP '(?<=dev )[^ ]+')

nslookup-test(){
	[[ -z ${1} || $1 =~ -h ]] && { printf "\e[2GUsage: ${FUNCNAME} <fqdn>.\n" 1>&2;return 2; } || { local NHOST=${1}; }
	local CDNS=$($RSLV_CMD $PRIMARY_NIC|awk '/Current DNS Server:/{print $NF}')
	local NSTEST=$(nslookup ${NHOST} 2>&1)
	[[ "${NSTEST}" =~ ";; connection timed out;" ]] && { printf "Could not reach DNS Server: ${CDNS}\n"; }
	[[ "${NSTEST}" =~ "** server can't find" ]] && { printf "No A Record found for ${NHOST} on DNS Server: ${CDNS}\n"; }
	[[ -n $(echo "${NSTEST}"|awk '/^Address: (([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]?)/') ]] && { printf "Name resolution (via nslookup) OK for ${NHOST}\n"; }
}

dig-test(){
	[[ -z ${1} || $1 =~ -h ]] && { printf "\e[2GUsage: ${FUNCNAME} <fqdn>.\n" 1>&2;return 2; } || { local DHOST=${1}; }
	local CDNS=$($RSLV_CMD $PRIMARY_NIC|awk '/Current DNS Server:/{print $NF}')
	local DIGTEST=$(dig a ${DHOST}|awk '/'${DHOST}'.*IN.*A/{print $NF}')
	[[ $DIGTEST = A ]] && { printf "No A Record found for ${DHOST} on DNS Server: ${CDNS}\n"; }
	if [[ $DIGTEST =~ (([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]?) ]];then
		local DIP=$(grep -oE '(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]?)' <<<  "$DIGTEST")
		printf "Name resolution (via dig) OK for ${DHOST} ($DIP)\n";
	fi
}


proxy-check() {
    [[ $1 = '--desc' ]] && { printf "\e[2G${FUNCNAME}: Checks for existence of proxy variables.\n" 1>&2;return 2; }
    [[ -n $(set -o posix;set|/bin/grep -ioE '^[Aa-Zz]*_PROXY'|sed '/^MAAS/d') ]] && { echo true;return 0; } || { echo false;return 1; }
};export -f proxy-check

uvars() {
	[[ -z ${1} || ${1} =~ -h ]] && { echo -en "Usage: ${FUNCNAME} <VAR_PREFIX> (to unset)\n" 1>&2;return 2; }
	local UVAR="${1}"
	unset $(set -o posix;set|/bin/grep -oE ''$(printf "^${UVAR}?(_)*%s*[^=]+\n")''|paste -sd" ")
};export -f uvars

svars() {
	[[ -z ${1} || ${1} =~ -h ]] && { echo -en "Usage: ${FUNCNAME} <VAR_PREFIX> (to show)\n" 1>&2;return 2; }
	local SVAR="${1}"
	(set -o posix;set|/bin/grep -oE ''$(printf "^${SVAR}?(_)*%s*[^=]+\n")'')|xargs -rn1 -P1 bash -c 'eval echo ${0}=\$${0}'
};export -f svars

get-release-info() {
declare -ag UBU_URLS=( http://releases.ubuntu.com http://old-releases.ubuntu.com/releases );     
declare -ag UBU_RELEASES_CSV=($(printf '%s\n' ${UBU_URLS[@]}|(xargs -rn1 -P0 -I{} curl -sSlL {}|awk -vRS=">|<" '/^Ubuntu.[0-9]+.*/{gsub(/\(|\).*$|LTS |Beta /,"");gsub(/\.[0-9]$/,"",$2);split($2,a,/\./);print tolower($2),tolower($3),tolower($4)}')|sort -uV|sed 's/ /,/g'))
printf '%s\n' ${UBU_RELEASES_CSV[@]}|tee 1>/dev/null ${OSSA_WORKDIR}/ubuntu-releases.csv
};export -f get-release-info

show-release-info() {
[[ -f ${OSSA_WORKDIR}/ubuntu-releases.csv ]] && declare -ag UBU_RELEASES_CSV=($(cat ${OSSA_WORKDIR}/ubuntu-releases.csv))
[[ -z ${UBU_RELEASES_CSV[@]} || ${#UBU_RELEASES_CSV[@]} -lt 1 ]] && { get-release-info; }
(printf "Release|Code Name|Release Type|Days until EOS (Date)|Days until EOL (Date)\n"
(printf '%s\n' "${UBU_RELEASES_CSV[@]//,/ }"| \
while read -er RELEASE CN1 CN2;do
[[ $((${RELEASE%%\.*} % 2)) -eq 1 || ! ${RELEASE##*\.} = 04 ]] && { export FLAG=$(printf "\e[38;2;160;160;160;3mInterim\e[0m") SL=182 SD=days EL=0; }
[[ $((${RELEASE%%\.*} % 2)) -eq 0 && ${RELEASE%%\.*} -le 10 && ${RELEASE%%\.*} -ge 6 ]] && [[ ${RELEASE##*\.} = 06 || ${RELEASE##*\.} = 04 ]] && { export FLAG=$(printf "LTS \e[38;2;160;160;160m(3 yrs)\e[0m") SL=3 SD=years EL=0; }
[[ $((${RELEASE%%\.*} % 2)) -eq 0 && ${RELEASE%%\.*} -le 16 && ${RELEASE%%\.*} -ge 12 && ${RELEASE##*\.} = 04 ]] && { export FLAG=$(printf "LTS \e[38;2;160;160;160m(5 yrs)\e[0m") SL=5 SD=years EL=8; }
[[ $((${RELEASE%%\.*} % 2)) -eq 0 && ${RELEASE%%\.*} -ge 18 && ${RELEASE##*\.} = 04 ]] && { export FLAG=$(printf "LTS \e[38;2;160;160;160m(10 yrs)\e[0m") SL=5 SD=years EL=10; }
EOS_END=$(date -d "$(date -d "$([[ ${RELEASE%%\.*} -le 99 ]] && echo -n $((${RELEASE%%\.*}+2000)) || echo -n $((${RELEASE%%\.*}+3000)))$(printf '%02d' $((10#${RELEASE##*\.}+1)))01 -1 day" +%Y%m%d) +${SL} ${SD}" +%Y%m%d)
EOL_END=$(date -d "$(date -d "$([[ ${RELEASE%%\.*} -le 99 ]] && echo -n $((${RELEASE%%\.*}+2000)) || echo -n $((${RELEASE%%\.*}+3000)))$(printf '%02d' $((10#${RELEASE##*\.}+1)))01 -1 day" +%Y%m%d) +${EL} ${SD}" +%Y%m%d)
EOS_DAYS_REMAINING=$((($(date -d ${EOS_END} +%s)-$(date +%s))/(60*60*24)))
[[ ${EL} = 0 ]] && EOL_DAYS_REMAINING=0 || EOL_DAYS_REMAINING=$((($(date -d ${EOL_END} +%s)-$(date +%s))/(60*60*24)))
if [[ ${EOS_DAYS_REMAINING} -le 0 ]];then
EOS_DAYS_REMAINING=$(printf "\e[38;2;160;160;160;3mExpired\e[0m")
elif [[ ${EOS_DAYS_REMAINING} -le 30 && ${EOS_DAYS_REMAINING} -gt 0 ]];then EOS_DAYS_REMAINING=$(printf "\e[38;2;255;0;0m${EOS_DAYS_REMAINING} days\e[0m ($(date -d "$(date +${EOS_END})" '+%d/%B/%Y'))")
elif [[ ${EOS_DAYS_REMAINING} -lt 365 && ${EOS_DAYS_REMAINING} -gt 0 ]];then EOS_DAYS_REMAINING=$(printf "\e[38;2;255;225;0m${EOS_DAYS_REMAINING} days\e[0m ($(date -d "$(date +${EOS_END})" '+%d/%b/%Y'))")
elif [[ ${EOS_DAYS_REMAINING} -gt 365 && ${EOS_DAYS_REMAINING} -gt 0 ]];then EOS_DAYS_REMAINING=$(printf "\e[38;2;0;235;0m${EOS_DAYS_REMAINING} days\e[0m ($(date -d "$(date +${EOS_END})" '+%d/%b/%Y'))");fi
if [[ ${EOL_DAYS_REMAINING} -le 0 ]];then EOL_DAYS_REMAINING=$(printf "\e[38;2;160;160;160;3mExpired\e[0m")
elif [[ ${EOL_DAYS_REMAINING} -le 30 ]];then EOL_DAYS_REMAINING=$(printf "\e[38;2;225;0;0m${EOL_DAYS_REMAINING} days\e[0m ($(date -d "$(date +${EOL_END})" '+%d/%b/%Y'))")
elif [[ ${EOL_DAYS_REMAINING} -lt 365 ]];then EOL_DAYS_REMAINING=$(printf "\e[38;2;255;200;0m${EOL_DAYS_REMAINING} days\e[0m ($(date -d "$(date +${EOL_END})" '+%d/%b/%Y'))")
elif [[ ${EOL_DAYS_REMAINING} -gt 365 ]];then EOL_DAYS_REMAINING=$(printf "\e[38;2;0;235;0m${EOL_DAYS_REMAINING} days\e[0m ($(date -d "$(date +${EOL_END})" '+%d/%b/%Y'))");fi
[[ ${EL} = 0 ]] && EOL_DAYS_REMAINING=$(printf "\e[38;2;160;160;160;3mN/A\e[0m")
echo "Ubuntu ${RELEASE^}|${CN1^} ${CN2^}|${FLAG^}|${EOS_DAYS_REMAINING}|${EOL_DAYS_REMAINING}"
done))|column -tnexs"|"|sed 's/^Release.*$/'$(printf "\e[1m&\e[0m")'/g'|/bin/grep -E "Release|${OSSA_CODENAME^}"|tee ${OSSA_WORKDIR}/release-info-ansi|sed 's/\x1b\[[0-9;]*[a-zA-Z]//g'|tee 1>/dev/null ${OSSA_WORKDIR}/release-info
};export -f show-release-info

make-origin-table() {
# Show package breakdown by component and suite
if [[ -f ${OSSA_MADISON} ]];then
	declare -ag COMPONENTS=(main universe multiverse restricted)
	declare -ag POCKETS=(${OSSA_CODENAME} ${OSSA_CODENAME}-updates ${OSSA_CODENAME}-security ${OSSA_CODENAME}-backports ${OSSA_CODENAME}-proposed)
	for x in ${COMPONENTS[@]};do
		declare -ag ${x^^}=\(\);eval ${x^^}+=\( $(grep "/${x}" ${OSSA_MADISON}|wc -l) \)
		for y in ${POCKETS[@]};do
			eval ${x^^}+=\( ${y}:$(grep "${y}/${x}" ${OSSA_MADISON}|wc -l) \)
		done
	done
	export COMPONENT_TOTAL=$((${MAIN[0]##*:}+${UNIVERSE[0]##*:}+${MULTIVERSE[0]##*:}+${RESTRICTED[0]##*:}))
	export RELEASE_TOTAL=$((${MAIN[1]##*:}+${UNIVERSE[1]##*:}+${MULTIVERSE[1]##*:}+${RESTRICTED[1]##*:}))
	export UPDATES_TOTAL=$((${MAIN[2]##*:}+${UNIVERSE[2]##*:}+${MULTIVERSE[2]##*:}+${RESTRICTED[2]##*:}))
	export SECURITY_TOTAL=$((${MAIN[3]##*:}+${UNIVERSE[3]##*:}+${MULTIVERSE[3]##*:}+${RESTRICTED[3]##*:}))
	export BACKPORTS_TOTAL=$((${MAIN[4]##*:}+${UNIVERSE[4]##*:}+${MULTIVERSE[4]##*:}+${RESTRICTED[4]##*:}))
	export PROPOSED_TOTAL=$((${MAIN[5]##*:}+${UNIVERSE[5]##*:}+${MULTIVERSE[5]##*:}+${RESTRICTED[5]##*:}))	
	((for ((i=0; i<${#POCKETS[@]}; i++)); do printf '%s\n' ${POCKETS[i]};done|paste -sd"|"|sed 's/^/Ubuntu '${OSSA_CODENAME^}'|'${OSSA_HOST}'|/g'
	printf '%s|%s|%s|%s|%s|%s|%s\n' ${COMPONENTS[0]} ${MAIN[0]##*:} ${MAIN[1]##*:} ${MAIN[2]##*:} ${MAIN[3]##*:} ${MAIN[4]##*:} ${MAIN[5]##*:}
	printf '%s|%s|%s|%s|%s|%s|%s\n' ${COMPONENTS[1]} ${UNIVERSE[0]##*:} ${UNIVERSE[1]##*:} ${UNIVERSE[2]##*:} ${UNIVERSE[3]##*:} ${UNIVERSE[4]##*:} ${UNIVERSE[5]##*:}
	printf '%s|%s|%s|%s|%s|%s|%s\n' ${COMPONENTS[2]} ${MULTIVERSE[0]##*:} ${MULTIVERSE[1]##*:} ${MULTIVERSE[2]##*:} ${MULTIVERSE[3]##*:} ${MULTIVERSE[4]##*:} ${MULTIVERSE[5]##*:}
	printf '%s|%s|%s|%s|%s|%s|%s\n' ${COMPONENTS[3]} ${RESTRICTED[0]##*:} ${RESTRICTED[1]##*:} ${RESTRICTED[2]##*:} ${RESTRICTED[3]##*:} ${RESTRICTED[4]##*:} ${RESTRICTED[5]##*:}
	printf '%s|%s|%s|%s|%s|%s|%s\n' Totals ${COMPONENT_TOTAL} ${RELEASE_TOTAL} ${UPDATES_TOTAL} ${SECURITY_TOTAL} ${BACKPORTS_TOTAL} ${PROPOSED_TOTAL}
	)|column -nexts"|"|tee ${OSSA_WORKDIR}/package_table.txt| \
	sed -re '1s/Ubuntu '${OSSA_CODENAME^}'/'$(printf "\e[1;48;2;233;84;32m\e[1;38;2;255;255;255m")'&'$(printf "\e[0m")'/' \
		-re '1s/'${OSSA_CODENAME}'/'$(printf "\e[38;2;0;255;0m")'&'$(printf "\e[0m")'/' \
		-re '1s/'${OSSA_HOST}'/'$(printf "\e[1;48;2;255;255;255m\e[1;38;2;233;84;32m")'&'$(printf "\e[0m")'/' \
		-re '1s/'${OSSA_CODENAME}'-updates/'$(printf "\e[38;2;0;255;0m")'&'$(printf "\e[0m")'/' \
		-re '1s/'${OSSA_CODENAME}'-security/'$(printf "\e[38;2;0;255;0m")'&'$(printf "\e[0m")'/' \
		-re '1s/'${OSSA_CODENAME}'-backports/'$(printf "\e[38;2;255;200;0m")'&'$(printf "\e[0m")'/g' \
		-re '1s/'${OSSA_CODENAME}'-proposed/'$(printf "\e[38;2;255;0;0m")'&'$(printf "\e[0m")'/g' \
		-re 's/main|universe/'$(printf "\e[38;2;0;255;0m")'&'$(printf "\e[0m")'/g' \
		-re 's/multiverse.*$|restricted.*$/'$(printf "\e[38;2;255;0;0m")'&'$(printf "\e[0m")'/g')|tee ${OSSA_WORKDIR}/package-table-ansi|sed 's/\x1b\[[0-9;]*[a-zA-Z]//g'|tee 1>/dev/null ${OSSA_WORKDIR}/package-table
		printf '\n\n'
fi
};export -f make-origin-table
